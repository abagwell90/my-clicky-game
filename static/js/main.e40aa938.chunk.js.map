{"version":3,"sources":["ImageSwitch.js","App.js","serviceWorker.js","index.js","images/logo1-01.png"],"names":["idImgArray","map","url","index","id","Column","_ref","refreshClicked","react_default","a","createElement","className","src","onClick","Row","_ref2","rowSet","ImageSwitch_Column","ImageSwitch","state","clicked","e","target","_this","includes","setState","concat","console","log","this","length","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","shuffle","rowSet1","rowSet2","rowSet3","rowSet4","forEach","img","push","ImageSwitch_Row","Component","App","logo","alt","src_ImageSwitch","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e40aa938.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n//borrowed from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nfunction shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\n\nconst imgArray = [\n    \"https://img.icons8.com/nolan/96/000000/ruby-programming-language.png\",\n    \"https://img.icons8.com/nolan/96/000000/swift.png\",\n    \"https://img.icons8.com/nolan/96/000000/api-settings.png\",\n    \"https://img.icons8.com/nolan/96/000000/console.png\",\n    \"https://img.icons8.com/nolan/96/000000/markdown.png\",\n    \"https://img.icons8.com/nolan/96/000000/bug.png\",\n    \"https://img.icons8.com/nolan/96/000000/plugin.png\",\n    \"https://img.icons8.com/nolan/96/000000/module.png\",\n    \"https://img.icons8.com/nolan/96/000000/commit-git.png\",\n    \"https://img.icons8.com/nolan/96/000000/web-design.png\",\n    \"https://img.icons8.com/nolan/96/000000/stack.png\",\n    \"https://img.icons8.com/nolan/96/000000/upload.png\",\n];\nconst idImgArray = imgArray.map((url, index) => {\n    return {\n        url: url,\n        id: index,\n    };\n});\n\n\nconst Column = ({ url, id, refreshClicked }) => {\n    return (\n        <div className=\"col-sm\" >\n            <img src={url} onClick={refreshClicked} id={id} />\n\n        </div>\n    );\n};\n\nconst Row = ({ rowSet, refreshClicked }) => {\n    return (\n        <div className=\"row\">\n            <Column url={rowSet[0].url} id={rowSet[0].id} refreshClicked={refreshClicked} />\n            <Column url={rowSet[1].url} id={rowSet[1].id} refreshClicked={refreshClicked} />\n            <Column url={rowSet[2].url} id={rowSet[2].id} refreshClicked={refreshClicked} />\n        </div>\n    );\n};\n\nclass ImageSwitch extends Component {\n\n    state = {\n        clicked: [],\n    };\n    refreshClicked = (e) => {\n\n        const id = e.target.id\n        if (this.state.clicked.includes(id)) {\n            this.setState({ clicked: [] })\n        } else {\n            const clicked = this.state.clicked.concat(id)\n            this.setState({ clicked: clicked })\n        }\n    };\n\n    render() {\n        console.log(this.state.clicked)\n        console.log(\"score: \", this.state.clicked.length)\n        shuffle(idImgArray);\n        const rowSet1 = [];\n        const rowSet2 = [];\n        const rowSet3 = [];\n        const rowSet4 = [];\n        idImgArray.forEach((img) => {\n            if (rowSet1.length !== 3) {\n                rowSet1.push(img)\n            } else if (rowSet2.length !== 3) {\n                rowSet2.push(img)\n            } else if (rowSet3.length !== 3) {\n                rowSet3.push(img)\n            } else {\n                rowSet4.push(img)\n            }\n        });\n\n        return (\n            <div>\n                <div id=\"score\">\n                <p>Your score: {this.state.clicked.length}</p>\n                </div>\n                <div className=\"container\">\n                    <Row rowSet={rowSet1} refreshClicked={this.refreshClicked} />\n                    <Row rowSet={rowSet2} refreshClicked={this.refreshClicked} />\n                    <Row rowSet={rowSet3} refreshClicked={this.refreshClicked} />\n                    <Row rowSet={rowSet4} refreshClicked={this.refreshClicked} />\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default ImageSwitch;\n\n\n","import React, { Component } from 'react';\nimport logo from './images/logo1-01.png';\nimport './App.css';\nimport ImageSwitch from './ImageSwitch';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <br></br>\n          <p>\n            Don't click the same image <br></br>twice and see how high <br></br>your score can go (score 12 and win!)\n          </p>\n          \n        </header>\n        <ImageSwitch>\n\n        </ImageSwitch>\n        <br></br>\n\n        <footer>\n          <br></br>\n          <p> Andrew J Bagwell</p><br></br>\n        <a href=\"https://icons8.com/icon/48250/source-code\">Source Code icon by Icons8</a> <br></br>\n        </footer>\n        <br></br>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo1-01.821599d0.png\";"],"sourceRoot":""}